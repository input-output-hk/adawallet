#!/usr/bin/env python3
"""Ada Wallet {version}

Usage:
    adawallet init-create [--testnet] [--rosetta-url URL]
    adawallet init-hardware [--testnet] [--rosetta-url URL]
    adawallet init-read-only [--testnet] [--rosetta-url URL]
    adawallet init-restore [--testnet] [--rosetta-url URL]
    adawallet import-accounts -s 0 -e 7
    adawallet import-accounts --accounts-file FILE_JSON
    adawallet import-pparams --pparams-file FILE_JSON
    adawallet import-utxos --utxo-file FILE_JSON
    adawallet fetch-utxos [--filter-min 3000000]
    adawallet get-ttl [--seconds INT]
    adawallet export-accounts --accounts-file FILE_JSON
    adawallet export-utxos --utxo-file FILE_JSON
    adawallet stake-registration-tx --account 0 --fee 210000 --out-file FILE_TX_MAYBE_SIGNED [--ttl 5000000] [--sign] [--deposit 2000000]
    adawallet delegate-pool-tx --account 0 --pool-id BECH32_POOL --fee 210000 --out-file FILE_TX_MAYBE_SIGNED [--ttl 5000000] [--sign]
    adawallet delegate-vote-tx --account 0 --voteType VOTE_TYPE [--voteTarget VOTE_TARGET] --fee 210000 --out-file FILE_TX_MAYBE_SIGNED [--ttl 5000000] [--sign]
    adawallet send-tx --account 0 --address BECH32_ADDR --amount 5000000 --fee 200000 --out-file FILE_TX_MAYBE_SIGNED [--multiasset] [--ttl 5000000] [--sign]
    adawallet sign-msg --account 0 --msg-file FILE_MSG --out-file FILE_MSG_SIGNED_JSON [--stake] [--hashed]
    adawallet sign-tx --account 0 --tx-body-file FILE_TX --out-file FILE_TX_SIGNED [--stake]
    adawallet witness-tx --account 0 --tx-body-file FILE_TX --out-file FILE_WITNESS [--payment | --stake]
    adawallet drain-tx --account 0 --address BECH32_ADDR --fee 210000 --out-file FILE_TX_MAYBE_SIGNED [--multiasset] [--rewards] [--ttl 5000000] [--sign]
    adawallet bulk-stake-registration-tx --fee 210000 --out-file FILE_TGZ [--ttl 5000000] [--sign] [--deposit 2000000]
    adawallet bulk-delegate-pool-tx --delegations FILE_JSON --fee 210000 --out-file FILE_TGZ [--ttl 5000000] [--sign]
    adawallet bulk-sign-tx --transactions-file FILE_TGZ --out-file FILE_TGZ [--stake]
    adawallet bulk-witness-tx --transactions-file FILE_TGZ --out-file FILE_TGZ [--payment | --stake]
    adawallet bulk-drain-tx --address BECH32_ADDR --fee 210000 --out-file FILE_TGZ [--multiasset] [--rewards] [--ttl 5000000] [--sign]
    adawallet bulk-tx --recipients FILE_JSON --account 0 --fee 170000 --out-file FILE_TX_MAYBE_SIGNED [--ttl 5000000] [--sign]
    adawallet migrate-wallet --accounts-file FILE_JSON --fee 170000 --out-file FILE_TGZ [--multiasset] [--rewards] [--ttl 5000000] [--sign]
    adawallet version
    adawallet wipe

Options:
    -h --help                                Show this screen
    --version                                Show version
    -s --start <INT>                         Starting account
    -e --end <INT>                           Ending account
    -t --testnet                             Use testnet addresses
    --account <INT>                          Account of wallet to use
    --accounts-file <FILE_JSON>              Specify an accounts file to perform operations on
    --address <BECH32_ADDR>                  Address as bech32
    --amount <INT>                           Amount to send
    --delegations <FILE_JSON>                JSON file containing map of accounts to pool ids {{"0": "$bech32_pool", ...}}
    --deposit <INT>                          Total deposits in transaction [default: 2000000]
    --drep-id <BECH32_POOL>                  Drep id hash as bech32
    --fee <INT>                              Fee to use for transaction
    --filter-min <INT>                       Apply a filter predicate such that lovelace only UTXO larger than <INT> lovelace are imported
    --hashed                                 Hash a message prior to signing per CIP-8
    --msg-file <FILE_MSG>                    A file containing a message to be signed
    --multiasset                             Include native tokens in the transaction
    --out-file <FILE>                        Output file, type varies -- see suffix indicated in the usage section
    --payment                                Witness with payment key
    --pool-id <BECH32_POOL>                  Pool id hash as bech32
    --pparams-file <FILE_JSON>               JSON file containing cardano-node protocol parameters for the network your adawallet is configured for
    --recipients <FILE_JSON>                 JSON file containing map of addrs to funds to send {{"$bech32_addr_recipient": $lovelace, ...}}
    --rewards                                Include rewards withdrawal in the transaction
    --rosetta-url <URL>                      DEPRECATED: Rosetta URL [default: https://explorer.cardano.org/rosetta]
    --seconds <INT>                          Seconds from now for tx to live [default: 7200]
    --sign                                   Sign Transaction
    --snapshot <FILE_JSON>                   UTXO snapshot to load into database
    --stake                                  Sign/Witness with stake key
    --transactions-file <FILE_TGZ>           Specify a transactions file to perform operations on; a gzipped tarball is expected
    --ttl <INT>                              Absolute slot number time to live for transaction(s)
    --tx-body-file <FILE_TX>                 Body of TX
    --utxo-file <FILE_JSON>                  JSON file containing utxos
    --voteTarget <VOTE_TARGET>               The vote delegation target; must be a <HASH>, <STRING>, or <FILEPATH>
    --voteType <VOTE_TYPE>                   The vote delegation type; must be one of the following strings:
                                             "drep-key-hash", "drep-script-hash", "drep-verification-key", "drep-verification-key-file", "always-abstain", "always-no-confidence"

Environment Variables:
    ADAWALLET_STATE                          Directory path for adawallet state; defaults to ./state-adawallet
    BLOCKFROST_API_URL                       Appropriate blockfrost base url; defaults to mainnet.  Must regex match form of: ^https://cardano-(mainnet|preview).blockfrost.io/api$
    BLOCKFROST_DISABLE                       To work with adawallet on local testnets where blockfrost is not available, blockfrost can be disabled by setting this bool to `True`
    BLOCKFROST_PROJECT_ID                    Appropriate blockfrost project secret; no default.  Must regex match form of: ^(mainnet|preview)[A-Za-z0-9]{{32}}$

Tips:
    * BLOCKFROST_PROJECT_ID secret env var must be set
    * BLOCKFROST_API_URL must be set if using testnet operations
    * Testnet options default to the cardano preview network with testnet-magic of 2
    * Exporting accounts will not export secrets
    * Importing accounts from exported accounts json file without secrets with not regenerate secrets
    * Use import-accounts with start and end options on fresh adawallet state for account secrets regeneration
    * Multiasset (native token) transactions require loading a "cardano-cli latest query protocol-parameters" json file to calculate minimum UTXO lovelace during transaction building
    * Set an env var of DEBUG=True to enable debug logging
    * Rosetta usage is deprecated
"""

import json
import os
import sys
from adawallet import __version__
from adawallet.lib import AdaWallet, input_mnemonic
from docopt import docopt

if len(sys.argv) == 1:
    sys.argv.append('-h')

__doc__ = __doc__.format(version=__version__)
arguments = docopt(__doc__, version=f"Ada Wallet {__version__}")
state_dir = os.getenv('ADAWALLET_STATE', './state-adawallet')
debug = os.getenv('DEBUG', 'False') == "True"

adawallet = AdaWallet(state_dir, debug)
if arguments['version']:
    print(f"Ada Wallet {__version__}")
    exit(0)

elif arguments['wipe']:
    adawallet.wipe()
    exit(0)

elif arguments['init-create']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    mnemonic = adawallet.create_wallet_mnemonic()
    mnemonic_words = " ".join(mnemonic)
    print(f"Mnemonic is: {mnemonic_words}")
    print("Securely store mnemonic or all funds could be lost!!!")
    exit(0)

elif arguments['init-hardware']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    adawallet.initialize_hardware_wallet()
    print("Initialized adawallet to work with a hardware wallet")
    exit(0)

elif arguments['init-restore']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    mnemonic = input_mnemonic()
    adawallet.load_wallet_from_mnemonic(mnemonic)
    exit(0)

elif arguments['init-read-only']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    adawallet.initialize_read_only()
    exit(0)

elif arguments['import-accounts']:
    if adawallet.wallet_initialized:
        if arguments["--start"] and arguments["--end"]:
            adawallet.import_accounts(int(arguments["--start"]), int(arguments["--end"]))
        if arguments["--accounts-file"]:
            adawallet.import_accounts(accounts_file=arguments["--accounts-file"])
        exit(0)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['sign-msg']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must specify account to sign the message with")
            exit(1)
        if not (arguments["--out-file"] and arguments["--msg-file"]):
            print("Must include --msg-file and --out-file flags")
            exit(1)
        adawallet.sign_msg(int(arguments["--account"]), arguments["--msg-file"], arguments["--out-file"], arguments["--stake"], arguments["--hashed"])
        exit(0)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['sign-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must specify account to sign transaction with")
            exit(1)
        if not (arguments["--out-file"] and arguments["--tx-body-file"]):
            print("Must include --tx-body-file and --out-file flags")
            exit(1)
        adawallet.sign_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], arguments["--stake"])
        exit(0)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['witness-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must specify account to sign transaction with")
            exit(1)
        if not (arguments["--out-file"] and arguments["--tx-body-file"]):
            print("Must include --tx-body-file and --out-file flags")
            exit(1)
        if arguments["--payment"] and arguments["--stake"]:
            print("Can only use one of --payment or --stake flags")
            exit(1)
        elif arguments["--payment"]:
            adawallet.witness_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], "payment")
            exit(0)
        elif arguments["--stake"]:
            adawallet.witness_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], "stake")
            exit(0)
        else:
            print("Most specify --payment or --stake flag")
            exit(1)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-witness-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--out-file"]:
            print("Must include --out-file flags")
            exit(1)
        if not arguments["--transactions-file"]:
            print("Must include --transactions-file flags")
            exit(1)
        if arguments["--payment"] and arguments["--stake"]:
            print("Can only use one of --payment or --stake flags")
            exit(1)
        elif arguments["--payment"]:
            adawallet.bulk_witness_tx(arguments["--transactions-file"], arguments["--out-file"], "payment")
            exit(0)
        elif arguments["--stake"]:
            adawallet.bulk_witness_tx(arguments["--transactions-file"], arguments["--out-file"], "stake")
            exit(0)
        else:
            print("Most specify --payment or --stake flag")
            exit(1)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-sign-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--out-file"]:
            print("Must include --out-file flags")
            exit(1)
        if not arguments["--transactions-file"]:
            print("Must include --transactions-file flags")
            exit(1)
        adawallet.bulk_sign_tx(arguments["--transactions-file"], arguments["--out-file"], arguments["--stake"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['fetch-utxos']:
    if adawallet.wallet_initialized:
        filter_min = int(arguments["--filter-min"]) if arguments["--filter-min"] is not None else 0
        adawallet.update_utxos_for_accounts(filter_min)
        print("All account utxos updated")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['import-pparams']:
    if adawallet.wallet_initialized:
        if not arguments["--pparams-file"]:
            print("Must include --pparams-file")
            exit(1)
        adawallet.import_protocol_parameters(arguments["--pparams-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['import-utxos']:
    if adawallet.wallet_initialized:
        if not arguments["--utxo-file"]:
            print("Must include --utxo-file")
            exit(1)
        adawallet.import_utxos_for_accounts(arguments["--utxo-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['export-utxos']:
    if adawallet.wallet_initialized:
        if not arguments["--utxo-file"]:
            print("Must include --utxo-file")
            exit(1)
        adawallet.export_utxos_for_accounts(arguments["--utxo-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['export-accounts']:
    if adawallet.wallet_initialized:
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        adawallet.export_accounts(arguments["--accounts-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['import-accounts']:
    if adawallet.wallet_initialized:
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        adawallet.import_accounts(arguments["--accounts-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['get-ttl']:
    if adawallet.wallet_initialized:
        if os.getenv('BLOCKFROST_DISABLE', 'False') == "True":
            print(f"Blockfrost is disabled, get-ttl unavailable.  Instead set ttl to an absolute slot height explicitly using `--ttl <INT>` for adawallet sub-commands.")
            exit(1)
        tip = int(adawallet.get_slot_tip())
        ttl = tip + int(arguments['--seconds'])
        print(ttl)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-tx']:
    if adawallet.wallet_initialized:
        if arguments["--recipients"]:
            with open(arguments["--recipients"]) as f:
                recipients = json.load(f)
        else:
            print("Must include --recipients")
            exit(1)
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.build_tx(
            int(arguments["--account"]),
            arguments["--out-file"],
            int(arguments["--fee"]),
            txouts=recipients,
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created sending {out_total} with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['send-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        if not arguments["--amount"]:
            print("Must include --amount")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        address = arguments["--address"]
        amount = arguments["--amount"]
        recipients = {f"{address}": int(amount)}
        in_total, out_total, fee, change = adawallet.build_tx(
            int(arguments["--account"]),
            arguments["--out-file"],
            int(arguments["--fee"]),
            txouts=recipients,
            multiasset=arguments["--multiasset"],
            asset_address=address if arguments["--multiasset"] else None,
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created, {"including native tokens if available" if arguments["--multiasset"] else "excluding native tokens"}, "
            f"sending {out_total} with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['stake-registration-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.stake_registration_tx(
            int(arguments["--account"]),
            arguments["--out-file"],
            int(arguments["--fee"]),
            deposit=int(arguments["--deposit"]),
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created with registration certificate with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-stake-registration-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_stake_registration_tx(
            arguments["--out-file"],
            int(arguments["--fee"]),
            ttl=arguments["--ttl"],
            sign=arguments["--sign"],
            deposit=int(arguments["--deposit"])
        )
        print(f"Transactions created with stake registrations with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['delegate-pool-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--pool-id"]:
            print("Must include --pool-id")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.delegate_pool_tx(
            int(arguments["--account"]),
            arguments["--pool-id"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created with stake delegation certificate with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-delegate-pool-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--delegations"]:
            print("Must include --delegations")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_delegate_pool_tx(
            arguments["--delegations"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transactions created with stake delegation certificates with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['delegate-vote-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--voteType"]:
            print("Must include --voteType")
            exit(1)
        if arguments["--voteType"] not in ("drep-key-hash", "drep-script-hash", "drep-verification-key", "drep-verification-key-file", "always-abstain", "always-no-confidence"):
            print("Must include --voteType as one of the following strings:")
            print('  "drep-key-hash", "drep-script-hash", "drep-verification-key", "drep-verification-key-file", "always-abstain", "always-no-confidence"')
            exit(1)
        if arguments["--voteType"] not in ("always-abstain", "always-no-confidence") and not arguments["--voteTarget"]:
            print("Must include --voteTarget as one of a: <HASH>, <STRING>, or <FILEPATH>")
            exit(1)
        if arguments["--voteType"] in ("always-abstain", "always-no-confidence") and arguments["--voteTarget"]:
            print('Must not include --voteTarget when --voteType is "always-abstain" or "always-no-confidence"')
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.delegate_vote_tx(
            int(arguments["--account"]),
            arguments["--voteType"],
            arguments["--voteTarget"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created with vote delegation certificate with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['drain-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.drain_tx(
            int(arguments["--account"]),
            arguments["--address"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            multiasset=arguments["--multiasset"],
            rewards=arguments["--rewards"],
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created for drain, {"including rewards if available" if arguments["--rewards"] else "excluding rewards"}, "
            f"{"including native tokens if available" if arguments["--multiasset"] else "excluding native tokens"}, "
            f"change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-drain-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_drain_tx(
            arguments["--address"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            multiasset=arguments["--multiasset"],
            rewards=arguments["--rewards"],
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transaction created for drain, {"including rewards if available" if arguments["--rewards"] else "excluding rewards"}, "
            f"{"including native tokens if available" if arguments["--multiasset"] else "excluding native tokens"}, "
            f"change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['migrate-wallet']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.migrate_wallet(
            arguments["--accounts-file"],
            arguments["--out-file"],
            int(arguments["--fee"]),
            multiasset=arguments["--multiasset"],
            rewards=arguments["--rewards"],
            ttl=arguments["--ttl"],
            sign=arguments["--sign"]
        )
        print(f"Transactions created to migrate wallet, {"including rewards if available" if arguments["--rewards"] else "excluding rewards"}, "
            f"{"including native tokens if available" if arguments["--multiasset"] else "excluding native tokens"}, "
            f"with total input funds of {in_total} and total fees of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)
