#!/usr/bin/env python3
"""Ada Wallet

Usage:
    adawallet init-create [--testnet] [--rosetta-url URL]
    adawallet init-restore [--testnet] [--rosetta-url URL]
    adawallet init-hardware [--testnet] [--rosetta-url URL]
    adawallet init-read-only [--testnet] [--rosetta-url URL]
    adawallet import-accounts -s 0 -e 7 [--accounts-file FILE]
    adawallet load-utxo --snapshot FILE
    adawallet fetch-utxos
    adawallet get-ttl [--seconds INT]
    adawallet import-utxos --utxo-file FILE
    adawallet export-utxos --utxo-file FILE
    adawallet export-accounts --accounts-file FILE
    adawallet import-accounts --accounts-file FILE
    adawallet bulk-witness-tx --transactions-file FILE --out-file FILE [--payment | --stake]
    adawallet bulk-sign-tx --transactions-file FILE --out-file FILE [--stake]
    adawallet stake-registration-tx --account 0 --fee 210000 --out-file FILE [--ttl 5000000] [--sign] [--deposit 2000000]
    adawallet bulk-stake-registration-tx --fee 210000 --out-file FILE [--ttl 5000000] [--sign] [--deposit 2000000]
    adawallet delegate-pool-tx --account 0 --pool-id pool1y25deq9kldy9y9gfvrpw8zt05zsrfx84zjhugaxrx9ftvwdpua2 --fee 210000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet bulk-delegate-pool-tx --delegations FILE --fee 210000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet drain-tx --account 0 --fee 210000 --address STRING --out-file FILE [--ttl 5000000] [--sign]
    adawallet bulk-drain-tx --address STRING --fee 210000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet send-tx --account 0 --address addr1q8ugkffj2mvs9stmcjxcsm3tfxpsn9dzt5whyq9u4vjq4cgzft2upy983gut8q23q3c92h60r9nvxs267acrma9z9pmst5p439 --amount 5000000 --fee 200000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet sign-tx --account 0 --tx-body-file FILE --out-file FILE [--stake]
    adawallet witness-tx --account 0 --tx-body-file FILE --out-file FILE [--payment | --stake]
    adawallet bulk-tx --recipients FILE --account 0 --fee 170000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet migrate-wallet --accounts-file FILE --fee 170000 --out-file FILE [--ttl 5000000] [--sign]
    adawallet wipe

Options:
    -h --help                   Show this screen
    --version                   Show version
    -s --start <INT>            Starting account
    -e --end <INT>              Ending account
    -t --testnet                Use testnet addresses
    --accounts-file <FILE>      Specify an accounts file to perform operations on
    --snapshot <FILE>           UTXO snapshot to load into database
    --pool-transactions <FILE>  Tarball containing transactions with pool registration certificates
    --delegations <FILE>        JSON file containing map of accounts to pool ids
    --rosetta-url <URL>         DEPRECATED: Rosetta URL [default: https://explorer.cardano.org/rosetta]
    --account <INT>             Account of wallet to use
    --fee <INT>                 Fee to use for transaction
    --deposit <INT>             Total deposits in transaction [default: 2000000]
    --amount <INT>              Amount to send
    --address <STRING>          Receiving address
    --pool-id <STRING>          pool id hash
    --ttl <INT>                 Time to live for transaction
    --out-file <FILE>           Output file
    --tx-body-file <FILE>       Body of TX
    --payment                   Witness with payment key
    --stake                     Sign/Witness with stake key
    --sign                      Sign Transaction
    --utxo-file <FILE>          JSON file containing utxos
    --transactions-file <FILE>  Specify a transactions file to perform operations on
    --seconds <INT>             Seconds from now for tx to live [default: 7200]
    --recipients <FILE>         JSON list of funds to send

Environment Variables:
    ADAWALLET_STATE             Directory path for adawallet state; defaults to ./state-adawallet
    BLOCKFROST_API_URL          Appropriate blockfrost base url; defaults to mainnet.  Must regex match form of: ^https://cardano-(mainnet|preview).blockfrost.io/api$
    BLOCKFROST_PROJECT_ID       Appropriate blockfrost project secret; no default.  Must regex match form of: ^(mainnet|preview)[A-Za-z0-9]{32}$

Tips:
    * BLOCKFROST_PROJECT_ID secret env var must be set
    * BLOCKFROST_API_URL must be set if using testnet operations
    * Testnet options default to the cardano preview network with testnet-magic of 2
    * Exporting accounts will not export secrets
    * Importing accounts from exported accounts json file without secrets with not regenerate secrets
    * Use import-accounts with start and end options on fresh adawallet state for account secrets regeneration
    * Rosetta usage is deprecated
"""

import sys
import os
import json
from docopt import docopt
from adawallet.lib import AdaWallet, input_mnemonic

if len(sys.argv) == 1:
    sys.argv.append('-h')

arguments = docopt(__doc__, version='Ada Wallet 1.0')
state_dir = os.getenv('ADAWALLET_STATE', './state-adawallet')
debug = "True" == os.getenv('DEBUG', 'False')

adawallet = AdaWallet(state_dir, debug)
if arguments['wipe']:
    adawallet.wipe()
    exit(0)

elif arguments['init-create']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    mnemonic = adawallet.create_wallet_mnemonic()
    mnemonic_words = " ".join(mnemonic)
    print(f"Mnemonic is: {mnemonic_words}")
    print("Securely store mnemonic or all funds could be lost!!!")
    exit(0)

elif arguments['init-hardware']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    adawallet.initialize_hardware_wallet()
    print("Initialized adawallet to work with a hardware wallet")
    exit(0)

elif arguments['init-restore']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    mnemonic = input_mnemonic()
    adawallet.load_wallet_from_mnemonic(mnemonic)
    exit(0)

elif arguments['init-read-only']:
    testnet = arguments['--testnet']
    adawallet.wipe()
    adawallet.initialize(testnet, arguments['--rosetta-url'])
    adawallet.initialize_read_only()
    exit(0)

elif arguments['import-accounts']:
    if adawallet.wallet_initialized:
        if arguments["--start"] and arguments["--end"]:
            adawallet.import_accounts(int(arguments["--start"]), int(arguments["--end"]))
        if arguments["--accounts-file"]:
            adawallet.import_accounts(accounts_file=arguments["--accounts-file"])
        exit(0)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['sign-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must specify account to sign transaction with")
            exit(1)
        if not (arguments["--out-file"] and arguments["--tx-body-file"]):
            print("Must include --tx-body-file and --out-file flags")
            exit(1)
        adawallet.sign_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], arguments["--stake"])
        exit(0)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['witness-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must specify account to sign transaction with")
            exit(1)
        if not (arguments["--out-file"] and arguments["--tx-body-file"]):
            print("Must include --tx-body-file and --out-file flags")
            exit(1)
        if arguments["--payment"] and arguments["--stake"]:
            print("Can only use one of --payment or --stake flags")
            exit(1)
        elif arguments["--payment"]:
            adawallet.witness_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], "payment")
            exit(0)
        elif arguments["--stake"]:
            adawallet.witness_tx(int(arguments["--account"]), arguments["--tx-body-file"], arguments["--out-file"], "stake")
            exit(0)
        else:
            print("Most specify --payment or --stake flag")
            exit(1)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-witness-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--out-file"]:
            print("Must include --out-file flags")
            exit(1)
        if not arguments["--transactions-file"]:
            print("Must include --transactions-file flags")
            exit(1)
        if arguments["--payment"] and arguments["--stake"]:
            print("Can only use one of --payment or --stake flags")
            exit(1)
        elif arguments["--payment"]:
            adawallet.bulk_witness_tx(arguments["--transactions-file"], arguments["--out-file"], "payment")
            exit(0)
        elif arguments["--stake"]:
            adawallet.bulk_witness_tx(arguments["--transactions-file"], arguments["--out-file"], "stake")
            exit(0)
        else:
            print("Most specify --payment or --stake flag")
            exit(1)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-sign-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--out-file"]:
            print("Must include --out-file flags")
            exit(1)
        if not arguments["--transactions-file"]:
            print("Must include --transactions-file flags")
            exit(1)
        adawallet.bulk_sign_tx(arguments["--transactions-file"], arguments["--out-file"], arguments["--stake"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['fetch-utxos']:
    if adawallet.wallet_initialized:
        adawallet.update_utxos_for_accounts()
        print("All account utxos updated")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['import-utxos']:
    if adawallet.wallet_initialized:
        if not arguments["--utxo-file"]:
            print("Must include --utxo-file")
            exit(1)
        adawallet.import_utxos_for_accounts(arguments["--utxo-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['export-utxos']:
    if adawallet.wallet_initialized:
        if not arguments["--utxo-file"]:
            print("Must include --utxo-file")
            exit(1)
        adawallet.export_utxos_for_accounts(arguments["--utxo-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['export-accounts']:
    if adawallet.wallet_initialized:
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        adawallet.export_accounts(arguments["--accounts-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['import-accounts']:
    if adawallet.wallet_initialized:
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        adawallet.import_accounts(arguments["--accounts-file"])
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['get-ttl']:
    if adawallet.wallet_initialized:
        tip = int(adawallet.get_slot_tip())
        ttl = tip + int(arguments['--seconds'])
        print(ttl)
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-tx']:
    if adawallet.wallet_initialized:
        if arguments["--recipients"]:
            with open(arguments["--recipients"]) as f:
                recipients = json.load(f)
        else:
            print("Must include --recipients")
            exit(1)
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.build_tx(int(arguments["--account"]), arguments["--out-file"], int(arguments["--fee"]), txouts=recipients, ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transaction created sending {out_total} with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['send-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        if not arguments["--amount"]:
            print("Must include --amount")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        address = arguments["--address"]
        amount = arguments["--amount"]
        recipients = {f"{address}": int(amount)}
        in_total, out_total, fee, change = adawallet.build_tx(int(arguments["--account"]), arguments["--out-file"], int(arguments["--fee"]), txouts=recipients, ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transaction created sending {out_total} with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['stake-registration-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.stake_registration_tx(int(arguments["--account"]), arguments["--out-file"], int(arguments["--fee"]), deposit=int(arguments["--deposit"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transaction created with registration certificate with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-stake-registration-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_stake_registration_tx(arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"], deposit=int(arguments["--deposit"]))
        print(f"Transactions created with stake registrations with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['delegate-pool-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--pool-id"]:
            print("Must include --pool-id")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.delegate_pool_tx(int(arguments["--account"]), arguments["--pool-id"], arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transaction created with delegation certificate with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-delegate-pool-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--delegations"]:
            print("Must include --delegations")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_delegate_pool_tx(arguments["--delegations"], arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transactions created with delegation certificates with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['drain-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--account"]:
            print("Must include --account")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.drain_tx(int(arguments["--account"]), arguments["--address"], arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transaction created draining rewards with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['bulk-drain-tx']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--address"]:
            print("Must include --address")
            exit(1)
        in_total, out_total, fee, change = adawallet.bulk_drain_tx(arguments["--address"], arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transactions draining rewards with change remaining of {change} at a fee of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)

elif arguments['migrate-wallet']:
    if adawallet.wallet_initialized:
        if not arguments["--fee"]:
            print("Must include --fee")
            exit(1)
        if not arguments["--out-file"]:
            print("Must include --out-file")
            exit(1)
        if not arguments["--accounts-file"]:
            print("Must include --accounts-file")
            exit(1)
        in_total, out_total, fee, change = adawallet.migrate_wallet(arguments["--accounts-file"], arguments["--out-file"], int(arguments["--fee"]), ttl=arguments["--ttl"], sign=arguments["--sign"])
        print(f"Transactions created to migrate wallet with total funds {out_total} and total fees of {fee}")
    else:
        print("No wallet exists. Please run init-hardware, init-create, init-restore or init-read-only first")
        exit(1)
